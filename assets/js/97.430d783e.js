(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{467:function(e,n,a){"use strict";a.r(n);var l=a(7),s=Object(l.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"hashmap的扩容过程-jdk1-8版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的扩容过程-jdk1-8版本"}},[e._v("#")]),e._v(" HashMap的扩容过程(jdk1.8版本)")]),e._v(" "),n("h2",{attrs:{id:"hashmap的常见参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的常见参数"}},[e._v("#")]),e._v(" HashMap的常见参数")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("initialCapacity    默认初始容量   值为16,最大容量值为2^30\nloadFactor         默认加载因子   值为0.75f\nthreshold          阈值           默认值为16 *0.75 ，即容量*加载因子\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[n("code",[e._v("这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中桶的数量，初始容量是创建哈希表时的容量。")])]),e._v(" "),n("p",[n("code",[e._v("加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，它衡量的是一个散列表的空间的使用程度，加载因子越大表示散列表的装填程度越高，反之愈小。")])]),e._v(" "),n("p",[e._v("如果加载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果加载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一般情况下无需修改。")]),e._v(" "),n("p",[e._v("在jdk1.7中，hashmap的底层创建的是Entry[]数组，在实例化后，底层就创建了一个长度为16的Entry[]数组，此时的底层结构是数组+链表；在jdk1.8中，底层创建的是Node[]数组，底层在一开始并不会创建数组，在第一次调用put方法时，底层才会创建一个长度为16的Node[]数组，此时的底层结构是数组+链表+红黑树。")]),e._v(" "),n("h2",{attrs:{id:"何时进行扩容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#何时进行扩容"}},[e._v("#")]),e._v(" 何时进行扩容？")]),e._v(" "),n("p",[e._v("HashMap使用的是懒加载，构造完HashMap对象后，只要不进行put 方法插入元素，HashMap并不会去初始化或者扩容table。")]),e._v(" "),n("p",[e._v("当首次调用put方法时，HashMap会发现table为空然后调用resize方法进行初始化。")]),e._v(" "),n("h3",{attrs:{id:"put方法源码如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#put方法源码如下"}},[e._v("#")]),e._v(" put方法源码如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("public V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n")])])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("当添加完元素后，如果HashMap发现size（元素总数）大于threshold（阈值），则会调用resize方法进行扩容，然后把扩容后的数组放到新的数组中去。\n\n若threshold（阈值）不为空，table的首次初始化大小为阈值，否则初始化为缺省值大小16。\n\n当table需要扩容时，扩容后的table大小变为原来的两倍，接下来就是进行扩容后table的调整：\n\n假设扩容前的table大小为2的N次方，有put方法可知，元素的table索引为其hash值的后N位确定\n\n那么扩容后的table大小即为2的N+1次方，则其中元素的table索引为其hash值的后N+1位确定，比原来多了一位\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("因此，table中的元素只有两种情况：")]),e._v(" "),n("ul",[n("li",[n("ol",[n("li",[e._v("元素hash值第N+1位为0：不需要进行位置调整")])])]),e._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[e._v("元素hash值第N+1位为1：调整至原索引的两倍位置")])])])]),e._v(" "),n("p",[e._v("在resize方法中，第45行的判断即用于确定元素hashi值第N+1位是否为0：")]),e._v(" "),n("ul",[n("li",[e._v("若为0，则使用loHead与loTail，将元素移至新table的原索引处")]),e._v(" "),n("li",[e._v("若不为0，则使用hiHead与hiHead，将元素移至新table的两倍索引处")])]),e._v(" "),n("p",[n("strong",[e._v("扩容或初始化完成后，resize方法返回新的table")])]),e._v(" "),n("h3",{attrs:{id:"hashmap的resize方法源码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的resize方法源码"}},[e._v("#")]),e._v(" hashmap的resize方法源码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('final Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({"rawtypes","unchecked"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);