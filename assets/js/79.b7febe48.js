(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{448:function(s,n,a){"use strict";a.r(n);var t=a(7),r=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java-泛型的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-泛型的使用"}},[s._v("#")]),s._v(" Java 泛型的使用")]),s._v(" "),n("h2",{attrs:{id:"泛型的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型的定义"}},[s._v("#")]),s._v(" 泛型的定义")]),s._v(" "),n("p",[s._v("泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实 际的类型参数，也称为类型实参）。")]),s._v(" "),n("h2",{attrs:{id:"泛型的引入背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型的引入背景"}},[s._v("#")]),s._v(" 泛型的引入背景")]),s._v(" "),n("p",[s._v("集合容器类在设计阶段或声明阶段不能确定这个容器到底实际存储的是什么类型的对象，所以"),n("font",{attrs:{color:"red"}},[s._v("在 JDK1.5 之前只能把元素类型设计为 Object，JDK1.5 之后使用泛型来解决。")]),s._v("因为这个时候除了元素的类型不确定，其他的部分是确定的，此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection"),n("E",[s._v("，List"),n("E",[s._v("，ArrayList"),n("E",[s._v(" 这个"),n("E",[s._v("就是类型参数，即泛型。")])],1)],1)],1)],1),s._v(" "),n("h2",{attrs:{id:"在集合中使用泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在集合中使用泛型"}},[s._v("#")]),s._v(" 在集合中使用泛型")]),s._v(" "),n("h3",{attrs:{id:"_1-集合中没有使用泛型时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-集合中没有使用泛型时"}},[s._v("#")]),s._v(" 1.集合中没有使用泛型时")]),s._v(" "),n("ul",[n("li",[s._v("1.任何类型都可以添加到集合中：类型不安全。")]),s._v(" "),n("li",[s._v("2.读取出来的对象需要强转：还可能会有报异常：java.lang.ClassCastException")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    //在集合中没有使用泛型时\n    @Test\n    public void test1(){\n        ArrayList list = new ArrayList();\n        list.add(66);\n        list.add(55);\n        list.add(77);\n        list.add(59);\n\n        //类型不安全\n        // list.add("AA");\n\n        for (Object score : list){\n     //在进行向下强转时可能会出异常：java.lang.ClassCastException\n            int stuScore = (int) score;\n            System.out.println(stuScore);\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"_2-在集合中使用泛型后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-在集合中使用泛型后"}},[s._v("#")]),s._v(" 2.在集合中使用泛型后")]),s._v(" "),n("ul",[n("li",[s._v("只有指定类型才可以添加到集合中：类型安全。")]),s._v(" "),n("li",[s._v("读取出来的对象不需要强转：便捷。")]),s._v(" "),n("li",[s._v("可以保证如果程序在编译时没有发出警告，运行时就不会产生 ClassCastException 异常。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  //在集合中使用泛型的情况,以ArrayList为例\n    @Test\n    public void test2(){\n      ArrayList<Integer> list = new ArrayList<Integer>();\n      list.add(66);\n      list.add(59);\n      list.add(86);\n      list.add(90);\n      //在编译时，就会进行类型检查，保证数据的安全性。\n     //      list.add("haha");\n\n        Iterator<Integer> iterator = list.iterator();\n        while(iterator.hasNext()){\n            int stucore = iterator.next();\n            System.out.println(stucore);\n        }\n    }\n\n    //在集合中使用泛型的情况,HashMap为例\n    @Test\n    public void test3(){\n        Map<String,Integer> map = new HashMap<String,Integer>();\n        map.put("AA",66);\n        map.put("BB",59);\n        map.put("DD",86);\n        map.put("CC",96);\n\n        //泛型的嵌套\n        Set<Map.Entry<String, Integer>> entry = map.entrySet();\n        Iterator<Map.Entry<String, Integer>> iterator = entry.iterator();\n        while (iterator.hasNext()){\n            Map.Entry<String, Integer> entry1 = iterator.next();\n            String key = entry1.getKey();\n            Integer value = entry1.getValue();\n            System.out.println(key + "---\x3e" + value);\n        }\n\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结：")]),s._v(" "),n("ul",[n("li",[s._v("1.在实例化集合类时，可以指明具体的泛型类型。")]),s._v(" "),n("li",[s._v("2.指明以后，在集合类或接口中凡是定义类或接口时，内部的结构(比如:方法、构造器、属性等)使用到类的泛型的位置，都指定为实例化的泛型类型。")]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的位置，用包装类来替换。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("如果实例化时，并没有指明泛型的类型，则默认类型为 java.lang.Object 类型。")])])])]),s._v(" "),n("h2",{attrs:{id:"自定义泛型类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型类"}},[s._v("#")]),s._v(" 自定义泛型类")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("泛型类的构造器如下：public GenericClass(){}。\n而 public GenericClass"),n("E",[s._v("(){}"),n("font",{attrs:{color:"red"}},[s._v(" 是错误的 ")])],1)],1)])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("泛型不同的引用不能相互赋值。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[s._v("泛型如果不指定，将被擦除，泛型对应的类型均按照 Object 处理，但不等价于 Object。泛型要使用就全部都使用。要不用，就全部都不使用。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"6"}},[n("li",[s._v("如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"7"}},[n("li",[s._v("jdk1.7 以后，泛型的简化操作：ArrayList"),n("String",[s._v(" arrli = new ArrayList<>();")])],1)])]),s._v(" "),n("li",[n("ol",{attrs:{start:"8"}},[n("li",[s._v("泛型的指定中不能使用基本数据类型，可以使用包装类替换。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"9"}},[n("li",[s._v("在类或接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在静态方法中不能使用类的泛型。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"10"}},[n("li",[n("font",{attrs:{color:"red"}},[s._v("异常类不能是泛型。")])],1)])]),s._v(" "),n("li",[n("ol",{attrs:{start:"11"}},[n("li",[s._v("不能使用 new E[]。但是可以是：E[] elements = (E[])new Object[capacity];")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"12"}},[n("li",[s._v("父类有泛型时，子类除了指定或保留父类的泛型，还可以增加自己的泛型。")])])])]),s._v(" "),n("h3",{attrs:{id:"参考代码如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考代码如下"}},[s._v("#")]),s._v(" 参考代码如下")]),s._v(" "),n("p",[s._v("Order.java")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('       //自定义泛型类\n    public class Order<T> {\n        String orderName;\n        int orderId;\n\n        //类的内部结构就可以使用类的泛型\n\n        T orderT;\n\n        public Order() {\n        }\n\n        public Order(String orderName, int orderId, T orderT) {\n            this.orderName = orderName;\n            this.orderId = orderId;\n            this.orderT = orderT;\n        }\n\n        public String getOrderName() {\n            return orderName;\n        }\n\n        public void setOrderName(String orderName) {\n            this.orderName = orderName;\n        }\n\n        public int getOrderId() {\n            return orderId;\n        }\n\n        public void setOrderId(int orderId) {\n            this.orderId = orderId;\n        }\n\n        //不是泛型方法\n        public T getOrderT() {\n            return orderT;\n        }\n        //不是泛型方法\n        public void setOrderT(T orderT) {\n            this.orderT = orderT;\n        }\n        //不是泛型方法\n        @Override\n        public String toString() {\n            return "Order{" +\n                    "orderName=\'" + orderName + \'\\\'\' +\n                    ", orderId=" + orderId +\n                    ", orderT=" + orderT +\n                    \'}\';\n        }\n\n        public <E> List<E> copyFromArrayToList(E[] arr){\n        ArrayList<E> list = new ArrayList<>();\n        for (E e : arr){\n            list.add(e);\n        }\n        return list;\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br")])]),n("p",[s._v("SubOrder.java")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    //SubOrder 不再是泛型类\n    public class SubOrder extends Order<Integer> {\n\n        public <E> List<E> copyFromArrayToList(E[] arr){\n            ArrayList<E> list = new ArrayList<>();\n            for (E e : arr){\n                list.add(e);\n            }\n            return list;\n        }\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("SubOrder1.java")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    //SubOrder1仍然是泛型类\n    public class SubOrder1<T> extends Order<T> {\n\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"对上述方法进行测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对上述方法进行测试"}},[s._v("#")]),s._v(" 对上述方法进行测试")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('     @Test\n    public void test1(){\n        //如果定义了泛型类，实例化时没有指明类的泛型，则默认此泛型类型为Object类型\n        //如果定义了类是带泛型的，建议在实例化的时候要指明类的泛型\n    //        Order order = new Order();\n    //        order.setOrderT(123);\n    //        order.setOrderT("abc");\n\n           //建议，实例化时指明类的泛型\n        Order<String> order = new Order<>("AA",1001,"haha");\n        order.setOrderT("AA:hello");\n    }\n\n    @Test\n    public void test2(){\n        SubOrder sub = new SubOrder();\n        //由于子类在继承带泛型的父类时，指明了泛型类型，则实例化子类对象时，不再需要指明泛型类型\n        sub.setOrderT(1111);\n\n        SubOrder1<String> sub1 = new SubOrder1<>();\n        sub1.setOrderT("AAA");\n    }\n\n    @Test\n    public void test3(){\n\n        //泛型不同的引用不能相互赋值。\n        ArrayList<String> list  = null;\n        ArrayList<Integer> list1 =null;\n    //  list =list1;\n\n    }\n\n    //测试泛型方法\n    @Test\n    public void test4(){\n       Order<String> order = new Order<>();\n       Integer[] arr = new Integer[]{1,2,3,4};\n       //泛型方法在调用时，指明泛型参数的类型，这个类型与类的泛型没有任何关系。\n        List<Integer> list = order.copyFromArrayToList(arr);\n\n    //  Iterator<Integer> iterator = list.iterator();\n    //   while (iterator.hasNext()){\n    //     System.out.println(iterator.next());\n    //   }\n        System.out.println(list);\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br")])]),n("h2",{attrs:{id:"通配符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[s._v("#")]),s._v(" 通配符")]),s._v(" "),n("p",[s._v("通配符就是英文格式下的 ?")]),s._v(" "),n("p",[s._v("类 A 是类 B 的父类，G< A> 和 G"),n("B",[s._v("是没有关系的，二者的共同父类是 G<?>")])],1),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    @Test\n    public void test3(){\n        List<Object> list1 = null;\n        List<String> list2 = null;\n        List<?> list3 = null;\n\n        list3 = list1;\n        list3 = list2;\n\n        print(list1);\n        print(list2);\n\n        //\n        List<String> list4 = new ArrayList<>();\n        list4.add("HH");\n        list4.add("AA");\n        list4.add("QQ");\n        list4.add("WW");\n\n        list3 = list4;\n\n      //添加：对于List<?>就不能向其内部添加数据。除了可以添加null以外\n    //  list3.add("DD");\n    //   list3.add("?");\n    // list3.add(\'?\');\n    // list3.add(null);\n\n        //获取(读取)：允许读取数据，读取的数据类型为Object。\n        Object o = list3.get(0);\n        System.out.println(o);\n    }\n\n    public void print(List<?> list){\n        Iterator<?> iterator = list.iterator();\n        while (iterator.hasNext()){\n            Object obj = iterator.next();\n            System.out.println(obj);\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);