(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{464:function(e,t,a){"use strict";a.r(t);var n=a(7),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"mysql-配置-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-配置-使用"}},[e._v("#")]),e._v(" Mysql 配置&&使用")]),e._v(" "),t("h2",{attrs:{id:"sql-分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql-分类"}},[e._v("#")]),e._v(" SQL 分类")]),e._v(" "),t("ul",[t("li",[e._v("DDL：操作数据库和表")]),e._v(" "),t("li",[e._v("DML：增删改表中数据")]),e._v(" "),t("li",[e._v("DQL：查询表中数据")]),e._v(" "),t("li",[e._v("DCL：管理用户，授权")])]),e._v(" "),t("h2",{attrs:{id:"启动、停止服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动、停止服务"}},[e._v("#")]),e._v(" 启动、停止服务")]),e._v(" "),t("p",[e._v("1.启动命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("net start mysql\n")])])]),t("p",[e._v("2.停止服务命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("net stop  mysql\n")])])]),t("h2",{attrs:{id:"登录、退出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录、退出"}},[e._v("#")]),e._v(" 登录、退出")]),e._v(" "),t("p",[e._v("1.登录命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("mysql -uroot -proot //-u后面是用户的登录的用户名，-p是用户登录密码，方式一，使用此方式在mysql5.6以后会出现警告，但是并没有什么影响，还是能成功进入数据库进行操作。\nmysql -uroot -p //按下回车键后输入密码，此时的密码是密文显示的，更安全，方式二\n")])])]),t("p",[e._v("2.退出命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("直接关闭cmd窗口  //方式一\nexit      //方式二\nquit     //方式三\n")])])]),t("p",[e._v("3.远程连接 mysql 命令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("mysql -h127.0.0.1 -uroot -proot //-h后面输入想要远程连接的ip，-p后面输入的是想要连接的ip的mysql的密码。方式一\nmysql --host=127.0.0.1 --user=root --password=root     //方式二，当然也可以选择按下回车键再输入密码。127.0.0.1表示想要远程连接的目标的ip地址，password后面写的是想要远程连接的目标的mysql密码。\n")])])]),t("h2",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[e._v("#")]),e._v(" 注释")]),e._v(" "),t("blockquote",[t("p",[e._v("方式一：/使用-- 来添加注释")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select * from student; -- 这是一个注释示例\n//在sql语句后使用--表示注释，--后必须要空一格，否则会报错，然后写自己想要添加的注释内容。\n")])])]),t("blockquote",[t("p",[e._v("方式二：使用#来添加注释")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select * from student # 这是一个注释示例2\n//使用#来添加注释，在sql语句后使用#，#后面是自己想要添加的注释内容，#后面有无空格都可以。\n")])])]),t("blockquote",[t("p",[e._v("方式三：使用/* */表示多行注释")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select * from student\n    /*\n    这是\n    多行\n    注释。\n    */\n;\n")])])]),t("h2",{attrs:{id:"向数据库中插入数据时出现中文乱码的解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向数据库中插入数据时出现中文乱码的解决方案"}},[e._v("#")]),e._v(" 向数据库中插入数据时出现中文乱码的解决方案")]),e._v(" "),t("h3",{attrs:{id:"_1-找到-my-ini-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-找到-my-ini-文件"}},[e._v("#")]),e._v(" 1.找到 my.ini 文件")]),e._v(" "),t("p",[e._v("找到安装目录的根目录下的 my.ini 文件，如果此目录下没有，可以进入 ProgramData 文件夹，注意此文件夹是隐藏文件夹，一般情况下 my.ini 文件就在这两个文件夹的根目录下，如果没有，自己在这两个文件夹中寻找，找不到的话，可以自己去创建。")]),e._v(" "),t("h3",{attrs:{id:"_2-进入-my-ini-配置文件对其进行修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-进入-my-ini-配置文件对其进行修改"}},[e._v("#")]),e._v(" 2.进入 my.ini 配置文件对其进行修改")]),e._v(" "),t("p",[e._v("修改下方三个地方：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  [client]\n   default-character-set=utf8\n  [mysql]\n   default-character-set=utf8\n  [mysqld]\n  default-character-set=utf8\n")])])]),t("p",[e._v("以上 3 个 section 都要加 default-character-set=utf8，平时我们可能只加了 mysqld 一项。如果没有完全修改可以依旧会出现中文乱码问题。"),t("br"),e._v("\n然后重启 mysql，执行 SQL 语句。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("SHOW VARIABLES LIKE 'character%';\n")])])]),t("p",[e._v("确保所有的 Value 项都是 utf8 即可，再向数据库中插入数据就不会出现中文乱码问题了。"),t("br"),e._v("\n如果再出现中文乱码，可以直接进入命令行界面，直接写 sql 语句，查看插入中文数据是否会出现乱码，如果再次出现乱码可能是数据库创建时没有使用 utf8 的编码字符集，修改数据的编码字符集为 utf8 一般就可以了。")]),e._v(" "),t("h2",{attrs:{id:"对数据库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对数据库操作"}},[e._v("#")]),e._v(" 对数据库操作")]),e._v(" "),t("h3",{attrs:{id:"创建数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建数据库"}},[e._v("#")]),e._v(" 创建数据库")]),e._v(" "),t("p",[e._v("创建数据库命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("create database test1;    //此时创建的数据库名为test1\n /*\n此时可能会出现错误，即数据库本来存在，可以在创建数据库之前进行判断数据库是否存在，使用下面的语句可以避免出现上述错误。\n */\n\ncreate database if not exists test1;\n")])])]),t("p",[e._v("查询数据库中存在的数据库命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("show databases;   //使用此命令会把所有的数据库查询结果显示出来。\n")])])]),t("p",[e._v("创建数据库时指定数据库的编码字符集命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("create database test2 character set utf8; //此时创建的数据库名为test2\n\ncreate database if not exists test2 character set utf8;//在创建数据库之前判断数据库是否存在。\n\nshow create database test2 ;  //查看数据库test2的编码字符集\n")])])]),t("h3",{attrs:{id:"修改数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改数据库"}},[e._v("#")]),e._v(" 修改数据库")]),e._v(" "),t("p",[e._v("修改数据库的字符集命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("alter database test2 character set gbk; //修改数据库test2的字符集为gbk\n")])])]),t("h3",{attrs:{id:"删除数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除数据库"}},[e._v("#")]),e._v(" 删除数据库")]),e._v(" "),t("p",[e._v("删除数据库命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" drop database test2; //删除数据库名为test2的数据库\n\n drop database if exists test2; //在删除数据库之前判断数据库是否存在，存在则删除，不存在该语句也不会报错。\n")])])]),t("h3",{attrs:{id:"使用数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用数据库"}},[e._v("#")]),e._v(" 使用数据库")]),e._v(" "),t("p",[e._v("修改正在使用的数据库的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("use test1 ； //修改当前使用的数据库为test1\n")])])]),t("p",[e._v("查询当前正在使用的数据库名称的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select database(); //使用此命令查询显示出当前正在使用的数据库名称。\n")])])]),t("h2",{attrs:{id:"数据库表的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库表的操作"}},[e._v("#")]),e._v(" 数据库表的操作")]),e._v(" "),t("h3",{attrs:{id:"数据库表的查询操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库表的查询操作"}},[e._v("#")]),e._v(" 数据库表的查询操作")]),e._v(" "),t("p",[e._v("查询所有表的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("show tables;  //注意使用此命令前需要先使用数据库的命令    ---\x3e   use  数据库名称，确保当前有数据库正在使用。\n")])])]),t("p",[e._v("查询表结构命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("desc student;  //student 为表名\n")])])]),t("p",[e._v("创建表命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("create table 表名(\n 列名1   数据类型1,\n 列名2   数据类型2,\n 列名3   数据类型3,\n   ......\n 列名n   数据类型n\n);\n//注意，前面的（不是最后一个）列名和数据类型后需要写一个逗号，最后一个列名和数据类型写完以后，不能再加逗号，加了的话会出错。\n例如：\n create table student(\n-> id int,\n-> name varchar(32),\n-> age int,\n-> birthday date,\n-> insert_time timestamp\n-> );\n")])])]),t("p",[e._v("删除表命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("drop table 表名;\n例如：\ndrop table student;   //这样可以会出现错误，即表不存在，可以在删除之前进行判断。\n示例二：\ndrop table if exists student;\n")])])]),t("p",[e._v("复制表命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("create table 表名 like 被复制的表名;\n示例：\ncreate table stu like student;\n")])])]),t("p",[e._v("修改表命令："),t("br"),e._v("\n修改表名命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("alter table student rename to stu; //将表student 重命名为stu\n")])])]),t("p",[e._v("修改表的字符集命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("alter table stu character set utf8;  //将表stu的字符集修改为utf8\n")])])]),t("p",[e._v("添加一列命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("alter table 要修改表名 add  列名 数据类型;\nalter table stu add salary double;\n")])])]),t("p",[e._v("修改列名称、类型命令:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("同时修改列名和数据类型：\nalter table 要修改表名 change 被修改列名  新的列名 新的数据类型;\n示例：\nalter table stu change salary sex varchar(10);\n只修改数据类型：\nalter table 要修改的表名 modify 被修改列名 新的数据类型;\n示例：\nalter table stu modify sex  varchar(20);\n")])])]),t("p",[e._v("删除列命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("alter table 表名 drop 要删除的列名;\n示例：\nalter table stu drop sex;\n")])])]),t("h2",{attrs:{id:"数据库表中的数据的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库表中的数据的操作"}},[e._v("#")]),e._v(" 数据库表中的数据的操作")]),e._v(" "),t("p",[e._v("添加数据命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("insert into 表名(列名1，列名2,...列名n) values(值1,值2,...值n);\n示例一：\ninsert into stu (id,name,age,birthday) values(1,'小明',21,19991011);\n示例二：\ninsert into stu  values(2,'小红',20,'1999-10-11',null);\n/*\n注意，\n1.此时的日期不能写成1999-10-11，会出错，日期之间不能加-。如果想要添加-可以在日期之前使用单或双引号(''或\"\")包裹。\n2.列名和数据值应该一一对应。\n3.如果表名之后不定义列名，则默认给所有的列赋值。如果不想给某个数据赋值，可以使用null代替，但是如果缺少数据值（列名和值不对应），则会报错。\n4.除了数字类型，其他类型的数据值需要使用单或双引号(''或\"\")包裹。\n5.sql语句中除了中文的数据值之外，其他的都要使用英文格式下的符号。\n*/\n")])])]),t("p",[e._v("修改表中数据的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("update 表名 set 列名1 = 值1 ,列名2 = 值2; ... where条件\n示例：\nupdate stu set name = '小王' ,age = 23 where id = 1;\n//注意，如果不加任何条件，会把表中所有的数据全部修改。\n")])])]),t("p",[e._v("删除表中的数据命令："),t("br"),e._v("\n删除表中指定数据的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("delete from 表名 where 条件\n示例：\ndelete from stu where id = 3;  //删除stu表中id为3的数据\n")])])]),t("p",[e._v("删除表中所有数据的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("delete  from 表名;   //方式一\nTRUNCATE table 表名;   //方式二\n方式一示例：\ndelete  from stu;  //删除stu表中的所有数据，不推荐使用，效率较低。\n方式二示例：\nTRUNCATE table stu;  //删除stu表，然后再创建一个一模一样的空表。\n")])])]),t("h3",{attrs:{id:"基础查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础查询"}},[e._v("#")]),e._v(" 基础查询")]),e._v(" "),t("p",[e._v("查询表中所有数据命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select * from 表名;\n示例：\nselect * from stu;  //查询stu表中的所有数据。\n")])])]),t("p",[e._v("查询部分数据命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select 列名1,列名2,... from 表名;\n示例：\nselect name,age,address from student;  //在student表中查询姓名、年龄、地址\n")])])]),t("p",[e._v("去除重复数据命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select distinct 列名1,列名2 ... from 表名;\n示例：\nselect distinct address from student;\n")])])]),t("p",[e._v("练习：计算数学和英语的成绩之和,显示出姓名、数学成绩、英语成绩和数学英语成绩之和")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select name, math,english ,math + english from student; //当出现某个数据为null时，数据之和也会为null的情况，是不合理的。\nselect name, math,english ,ifnull (math,0) + ifnull (english,0) from student;   //如果数学成绩或者英语成绩为null的话将其数据改为0进行计算。\n\n给数据取别名，例如，将math + english 取别名为 总分\nselect name, math,english ,ifnull (math,0) + ifnull (english,0) as 总分 from student;  //方式一\nselect name 姓名, math 数学,english 英语,ifnull (math,0) + ifnull (english,0) 总分 from student;  //方式二，不使用as，直接加一个空格，再写别名也可以。\n")])])]),t("h3",{attrs:{id:"条件查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件查询"}},[e._v("#")]),e._v(" 条件查询")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：查询student表中年龄大于20岁的数据\nselect * from student where age > 20;  //注意：此时查询的数据不包括年龄等于20的数据。\n\n示例二：查询student表中年龄等于20岁的数据\nselect * from student where age = 20;\n\n示例三：查询student表中年龄不等于20岁的数据\nselect * from student where age != 20; //方式一\nselect * from student where age <> 20; //方式二\n\n示例三：查询student表中年龄大于20岁，小于25岁的数据\nselect * from student where age > 20 and age < 25 ; //方式一\nselect * from student where age between 20 and 25 ; //方式二，此方式包括20岁和25岁的数据。\nselect * from student where age > 20 && age < 25 ; //方式三 ，不推荐使用\n\n示例四：查询student表中年龄为20岁、22岁的数据\nselect * from student where age = 20 or age = 22 ; //方式一\nselect * from student where age in (20 , 22) ; //方式二\n\n示例五：查询student表中英语成绩为null的数据\nselect * from student where english is null; //注意，查询数据为null时不能使用等号。需要使用is。\n\n示例六：查询student表中英语成绩不为null的数据\nselect * from student where english is  not null;\n")])])]),t("h3",{attrs:{id:"模糊查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模糊查询"}},[e._v("#")]),e._v(" 模糊查询")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：查询student表中姓为 小 的数据\nselect * from student where name like '小%' ; // % 号表示任意字符，下划线(_)表示单个字符。\n\n示例二：查询student表中姓名中第二个字为 三 的数据\nselect * from student where name like '_三%' ;\n\n示例三：查询student表中姓名为两个字的数据\nselect * from student where name like '__' ;   //在引号内写上两个英文格式下的_即可。\n\n示例一：查询student表中姓名中包含 小 的数据\nselect * from student where name like '%小%' ;\n")])])]),t("h3",{attrs:{id:"排序查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排序查询"}},[e._v("#")]),e._v(" 排序查询")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("select * from 表名 order by 需要排序的列名1 排序方式,需要排序的列名2 排序方式2 ... ;\n注意，默认情况下，即不写排序方式或者写成 asc ，按照升序进行排序，使用desc来表示降序的排序方式。当有多个字段进行排序时，只有前面需要排序的字段的的数据相同时，才会去判断后面的数据。\n\n示例一：将student表中的数据按照math的成绩进行升序排序\nselect * from student order by math ;\n\n示例二：将student表中的数据按照math的成绩进行降序排序\nselect * from student order by math desc ;\n\n示例三：将student表中的数据按照math的成绩进行升序排序，如果数学成绩相同，则按照英语成绩进行降序排序。\nselect * from student order by math , english desc ;\n\n示例四：将student表中的数据按照math的成绩进行降序排序，如果数学成绩相同，则按照英语成绩进行降序排序。\nselect * from student order by math desc , english desc ;\n")])])]),t("h3",{attrs:{id:"聚合函数-将一列数据作为一个整体-进行纵向的计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数-将一列数据作为一个整体-进行纵向的计算"}},[e._v("#")]),e._v(" 聚合函数：将一列数据作为一个整体，进行纵向的计算")]),e._v(" "),t("ol",[t("li",[e._v("count：计算数量")]),e._v(" "),t("li",[e._v("max:计算最大值")]),e._v(" "),t("li",[e._v("min: 计算最小值")]),e._v(" "),t("li",[e._v("sum：计算和")]),e._v(" "),t("li",[e._v("avg：计算平均值。")])]),e._v(" "),t("p",[e._v("注意：聚合函数的计算排除了字段为 null 的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：计算student表中name字段的总数量。\nselect count(name) 学生总数 from student;\n\n示例二：计算student表中english字段的总数量，解决count计算数量时排除字段为null的问题。\nselect count(ifnull (english,0)) from student;\n\n示例三：计算student表中math字段的最大值。\nselect max(math)  from student;\n\n示例四：计算student表中math字段的最小值。\nselect min(math)  from student;\n\n示例五：计算student表中math字段的和。\nselect sum(math)  from student;\n\n示例六：计算student表中english字段的和(english字段中存在数据值为null的数据)。\nselect sum(english)  from student;  //默认会排除数据值为null的数据值\n\n示例七：计算student表中math字段的平均值。\nselect avg(math)  from student;\n")])])]),t("h3",{attrs:{id:"分组查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组查询"}},[e._v("#")]),e._v(" 分组查询")]),e._v(" "),t("p",[t("strong",[e._v("注意：分组之后查询的数据只能是聚合函数或者分组字段，加上其他的字段没有任何意义。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：按照性别分组，分别查询男、女同学的英语成绩的平均分。\nselect sex , avg(english) from student group by sex;\n\n示例二：按照性别分组，分别查询男、女同学的英语成绩的平均分和人数。\nselect sex , avg(english),count(id) from student group by sex;\n\n示例三：按照性别分组，分别查询男、女同学的英语成绩的平均分和人数，英语成绩低于60分的同学不参与分组。\nselect sex , avg(english),count(id) from student where english > 60 group by sex;\n\n示例四：按照性别分组，分别查询男、女同学的英语成绩的平均分和人数，英语成绩低于60分的同学不参与分组，要求分组后的成员数量要大于2人。\nselect sex , avg(english),count(id) from student where english > 60 group by sex having count(id) > 2;\n")])])]),t("h4",{attrs:{id:"where-和-having-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#where-和-having-的区别"}},[e._v("#")]),e._v(" where 和 having 的区别？")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("where 在分组之前进行限定，如果不满足分组，则不参与分组，having 在分组之后进行限定，如果不满足条件，数据不会显示出来。")])]),e._v(" "),t("li",[t("p",[e._v("where 后不可以进行聚合函数的判断，having 后可以进行聚合函数的判断。")])])]),e._v(" "),t("h3",{attrs:{id:"分页查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分页查询"}},[e._v("#")]),e._v(" 分页查询")]),e._v(" "),t("p",[e._v("select from 表名 limit 开始的索引，每页要显示的数量")]),e._v(" "),t("p",[e._v("开始的索引计算方式： 开始的索引 = (当前的页码 -1 ) * 每页要显示的数量")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：\nselect * from student limit 0,5; -- 第一页  //当前为第一页，每页要显示5条数据。\n")])])]),t("p",[e._v("limit 是 mysql 的分页显示数据的语法。其他的数据库则不是 limit")]),e._v(" "),t("h2",{attrs:{id:"约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[e._v("#")]),e._v(" 约束")]),e._v(" "),t("p",[e._v("概念：对数据库表中的数据进行限定，保证数据的正确性、完整性、有效性。")]),e._v(" "),t("p",[e._v("分类：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("主键约束 --\x3e primary key")])]),e._v(" "),t("li",[t("p",[e._v("非空约束 --\x3e not null")])]),e._v(" "),t("li",[t("p",[e._v("唯一性约束 --\x3e unique")])]),e._v(" "),t("li",[t("p",[e._v("外键约束 --\x3e foreign key")])])]),e._v(" "),t("h3",{attrs:{id:"主键约束并使其自动增长"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键约束并使其自动增长"}},[e._v("#")]),e._v(" 主键约束并使其自动增长")]),e._v(" "),t("p",[e._v("注意："),t("br"),e._v("\n1.包含主键约束的字段非空且唯一。"),t("br"),e._v("\n2.一张表中只能有一个字段作为主键。"),t("br"),e._v("\n3.主键是表中记录的唯一性标识。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：在创建表时为字段id添加主键约束，创建表的SQL语句如下：\ncreate table stu(\nid int primary key ,\nname varchar(20)\n);\n\n示例二：在创建表时为字段id添加主键约束并使其自动增长，创建表的SQL语句如下：\ncreate table stu(\nid int primary key auto_increment ,\nname varchar(20)\n);\n\n示例三：删除字段的主键约束\nalter table stu drop primary key ;\n\n示例四：删除字段的自动增长，并不能删除主键约束：\nalter table stu modify id int;  //方式一\nalter table stu change id id int;  //方式二\n\n示例五：创建表完成之后再为字段添加主键约束\nalter table stu modify id int primary key;  //方式一\nalter table stu change id id int primary key;  //方式二\n\n\n示例六：创建表完成之后再为字段添加自动增长\nalter table stu modify id int auto_increment;  //方式一\nalter table stu change id id int auto_increment;  //方式二\n")])])]),t("h3",{attrs:{id:"非空约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非空约束"}},[e._v("#")]),e._v(" 非空约束")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：在创建表时为字段name添加非空约束，创建表的SQL语句如下：\ncreate table stu(\nid int,\nname varchar(20) not null\n);\n\n示例二：删除字段name的非空约束\nalter table stu modify name varchar(20);  //方式一\nalter table stu change name  name varchar(20);  //方式二\n\n示例三：创建表完成之后再为字段name添加非空约束\nalter table stu modify name varchar(20) not null;  //方式一\nalter table stu change name  name varchar(20) not null;  //方式二\n")])])]),t("h3",{attrs:{id:"唯一性约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#唯一性约束"}},[e._v("#")]),e._v(" 唯一性约束")]),e._v(" "),t("p",[e._v("注意：mysql 中，在没有非空约束的字段下，唯一性约束的字段的数据中可以有多个 null,不会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一：在创建表时为字段name添加唯一性约束，创建表的SQL语句如下：\ncreate table stu(\nid int,\nname varchar(20) not null,unique\n);\n\n示例二：删除字段name的唯一性约束\nalter table stu drop index name ;\n\n示例三：创建表完成之后再为字段name添加唯一性约束\nalter table stu modify name varchar(20) unique ;  //方式一\nalter table stu change name  name varchar(20) unique ;  //方式二\n")])])]),t("h3",{attrs:{id:"外键约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外键约束"}},[e._v("#")]),e._v(" 外键约束")]),e._v(" "),t("p",[e._v("外键约束：让表与表之间产生关系，从而保证了数据的正确性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("create table 表名(\n  ......\n外键列名 外键列数据类型,\nconstraint 外键名称 foreign key (外键列名) references 需要关联的主表名(需要关联的主表的列名)\n);\n\n示例一：在创建表时添加外键约束，\ncreate table employee(\nid int primary key auto_increment ,\nname varchar(20),\nage int ,\ndep_id int ,\nconstraint emp_dept_fk foreign key (dep_id) references department(id)\n);\n\n示例二：删除表的外键约束\nalter table employee drop foreign key emp_dept_fk;  //emp_dept_fk外外键名称。\n\n示例三：创建表完成之后再添加外键约束\nalter table employee add constraint emp_dept_fk foreign key (dep_id) references department(id);\n\n示例四：添加外键，并设置级联更新\nalter table employee add constraint emp_dept_fk foreign key (dep_id) references department(id) on update cascade;\n\n示例五：添加外键，并设置级联更新，级联删除 ,一般不会设置级联删除。\nalter table employee add constraint emp_dept_fk foreign key (dep_id) references department(id) on update cascade on delete cascade;\n")])])]),t("h2",{attrs:{id:"多表操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多表操作"}},[e._v("#")]),e._v(" 多表操作")]),e._v(" "),t("p",[e._v("多表之间的关系："),t("br"),e._v("\n      一对一"),t("br"),e._v("\n      一对多"),t("br"),e._v("\n      多对多")]),e._v(" "),t("h3",{attrs:{id:"多表查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[e._v("#")]),e._v(" 多表查询")]),e._v(" "),t("p",[e._v("笛卡尔积：有两个集合 A,B .取这两个集合的所有组成情况。要完成多表查询，需要消除无用的数据。"),t("br"),e._v("\n多表查询的分类："),t("br"),e._v("\n  1. 内连接查询"),t("br"),e._v("\n      1.隐式内连接"),t("br"),e._v("\n      2.显式内连接")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("内连接查询需要明确的：\n1. 想要从哪些表中查询数据？\n2. 查询的条件是什么？\n3. 需要查询哪些字段\n\n示例一(隐式内连接)：查询所有的员工信息及其对应的部门信息：\n select * from emp,dept where emp.dept_id = dept.id;\n\n示例二(隐式内连接)：查询员工表的姓名、性别、工资及其对应的部门名称：\n select\n emp.name,\n emp.gender,\n emp.salary,\n dept.name\n from\n emp,dept\n where\n emp.dept_id = dept.id;\n\n 示例三(隐式内连接)：查询员工表的姓名、性别、工资及其对应的部门名称，为表取别名，简化sql语句：\n select\n e.name,\n e.gender,\n e.salary,\n d.name\n from\n emp e,dept d\n where\n e.dept_id = d.id;\n\n//显式内连接： select 字段列表 from 表名1 inner join 表名2 on 条件\n    //注意 inner 可以省略不写\n示例四(显式内连接)：查询所有的员工信息及其对应的部门信息：\n select * from emp inner join dept on emp.dept_id = dept.id;\n select * from emp join dept on emp.dept_id = dept.id;\n\n 示例五(显式内连接)：查询员工表的姓名、性别、工资及其对应的部门名称，为表取别名，简化sql语句：\n select\n e.name,\n e.gender,\n e.salary,\n d.name\n from\n emp e\n join\n dept d\n on\n e.dept_id = d.id;\n")])])]),t("p",[e._v("  2. 外连接查询"),t("br"),e._v("\n      1.左外连接"),t("br"),e._v("\n      2.右外连接")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("左外连接查询：select 字段列表 from 表1 left [outer] join 表2 on 条件；\n查询的是左表所有数据以及其交集部分。\n\n示例一(左外连接)：查询所有的员工信息，如果员工有部门显示出部门名称，没有部门则不显示部门名称。\nselect\ne.*,\nd.name\nfrom\nemp e\nleft join\ndept d\non\ne.dept_id = d.id;\n\n示例二(左外连接)：查询员工表中员工的姓名、性别、工资，如果员工有部门显示出部门名称，没有部门则不显示部门名称。\nselect\ne.name,\ne.gender,\ne.salary,\nd.name\nfrom\nemp e\nleft join\ndept d\non\ne.dept_id = d.id;\n\n右外连接：select 字段列表 from 表1 right [outer] join 表2 on 条件；\n查询的是右表所有数据以及其交集部分。\n\n示例一(右外连接)：查询员工表中员工的姓名、性别、工资，如果员工有部门显示出部门名称，没有部门则不显示部门名称。\nselect\nd.name,\ne.name,\ne.gender,\ne.salary\nfrom\ndept d\nright join\nemp e\non\ne.dept_id = d.id;\n")])])]),t("p",[e._v("  3. 子查询")]),e._v(" "),t("p",[e._v("   1. 子查询的结果是单行单列的：")]),e._v(" "),t("p",[e._v("      子查询可以作为条件，使用运算符 > >= < <= = 去判断。"),t("br"),e._v("\n   2. 子查询的结果是多行单列的：")]),e._v(" "),t("p",[e._v("      子查询可以作为条件，使用运算符 in 来判断。"),t("br"),e._v("\n   3. 子查询的结果是多行多列的：")]),e._v(" "),t("p",[e._v("      子查询可以作为一张虚拟表参与查询。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("示例一（结果是单行单列的）：查询工资最高的员工的信息：\nselect * from emp where salary = (\n    select max(salary) from emp\n    );\n示例二（结果是单行单列的）：查询员工工资小于平均工资的员工信息\nselect * from emp where salary < (select avg(salary) from emp);\n\n示例三（结果是多行单列的）：查询财务部和市场部的所有员工信息\nselect * from emp where dept_id in (select id from dept where name = '财务部' or name = '市场部');\n\n示例四（结果是多行多列的）：查询员工的入职时间在2011年11月11日之后的员工信息和部门信息\nselect * from dept  d ,(select * from emp where join_date > 20111111) e1 where e1.dept_id = d.id ;   //方式一，使用子查询\nselect * from dept d , emp e where e.dept_id = d.id and join_date > '2011-11-11' ;   //方式二，使用普通内连接查询\n")])])]),t("h3",{attrs:{id:"多表查询练习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多表查询练习"}},[e._v("#")]),e._v(" 多表查询练习")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("练习1：查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述\nselect\ne.id,\ne.ename,\ne.salary,\nj. jname,\nj.description\nfrom\nemp e,\njob j\nwhere\ne.job_id = j.id;\n\n练习2：查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置\nselect\ne.id ,\ne.ename ,\ne.salary ,\nj.jname,\nj.description,\nd.dname,\nd.loc\nfrom\nemp e,\njob j,\ndept d\nwhere\ne.job_id = j.id\nand\ne.dept_id = d.id;\n\n练习3：查询员工姓名，工资，工资等级\nselect\ne.ename ,\ne.salary ,\ns.grade\nfrom\nemp e ,\nsalarygrade s\nwhere\ne.salary\nbetween\nlosalary\nand\nhisalary;\n\n练习4：查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级\nselect\ne.ename ,\ne.salary ,\nj.jname,\nj.description ,\nd.loc ,\ns.grade\nfrom\nemp e,\njob j,\ndept d,\nsalarygrade s\nwhere\ne.job_id = j.id\nand\ne.dept_id = d.id\nand\ne.salary\nbetween\nlosalary\nand\nhisalary ;\n\n练习5：查询出部门编号、部门名称、部门位置、部门人数\nselect\nd.id,\nd.dname,\nd.loc ,\nt.total\nfrom\ndept d ,\n(select dept_id , count(id) total from emp group by dept_id ) t\nwhere\ndept_id = d.id ;\n\n练习6：查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询。\n//emp表中mgr 和emp表中的id进行自关联，为emp表取别名查询两次，相当于是两个表\nselect\ne1.ename 姓名,  -- 员工姓名\ne1.mgr ,    -- 员工的管理者 ，可以不查询\ne2.id ,     -- 员工的id  ，可以不查询\ne2.ename 管理者    -- 管理者姓名\nfrom\nemp e1\nleft\njoin\nemp e2\non\ne1.mgr = e2.id;\n")])])]),t("h2",{attrs:{id:"数据库范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库范式"}},[e._v("#")]),e._v(" 数据库范式")]),e._v(" "),t("p",[e._v("设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。"),t("br"),e._v("\n目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。")]),e._v(" "),t("h3",{attrs:{id:"分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[e._v("#")]),e._v(" 分类")]),e._v(" "),t("ol",[t("li",[e._v("第一范式(1NF):即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项，第一范式就是无重复的域。在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。")]),e._v(" "),t("li",[e._v("第二范式(2NF):在 1NF 的基础上，非码属性必须完全依赖于候选码（在 1NF 基础上消除非主属性对主码的部分函数依赖）。")]),e._v(" "),t("li",[e._v("第三范式(3NF):在 2NF 基础上，任何非主属性不依赖于其它非主属性（在 2NF 基础上消除传递依赖）。")]),e._v(" "),t("li",[e._v("巴斯-科德范式(BCNF)：在 3NF 基础上，任何非主属性不能对主键子集依赖（在 3NF 基础上消除对主码子集的依赖）")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.baidu.com/link?url=zbW7paFY43R2sRPQFqgPJ5E7D9jXhCluHv9iqdqA1f9jITD-pr3g4ngqEbhNSv_vka2IqGWTIxWxnmApBX-Lej9Rpk51bAHL9Jd-R6PjRwdfQpKw4SBc_MdnYRtc-a9t&wd=&eqid=8975e0bd000959ef000000025d44eb91",target:"_blank",rel:"noopener noreferrer"}},[t("u",[e._v("参考：函数依赖百度百科")]),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.baidu.com/link?url=71t7ToBccg29ukb34TRUaNb5uPR6q5l-muxwFhpiJtHBBX973H26_56oHdvNF3NpMmm8AC0xjJ72pG9YO59Rwba-jMMkjqcAmOSlkii2-CK2IbVAJ7F73-ytNox_y5dk43-HPI5omufINA2wETErIK&wd=&eqid=88deb1a7000e7986000000025d44e248",target:"_blank",rel:"noopener noreferrer"}},[t("u",[e._v("参考：数据库范式百度百科")]),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"数据库的备份还原"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库的备份还原"}},[e._v("#")]),e._v(" 数据库的备份还原")]),e._v(" "),t("p",[e._v("1.命令行的方式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("备份：mysqldump -u用户名 -p用户密码  需要备份的数据库名称 > 保存的文件路径\n还原：\n     1.登录mysql数据库\n     2.创建数据库\n     3.使用数据库\n     4.执行保存的原数据库文件 命令：source 保存的文件路径。\n示例：\n    数据库备份 ：mysqldump -uroot -proot  test > e://DataBase//haha.sql\n    数据库还原： 1. mysql -uroot -proot\n                2. create database haha;\n                3. use haha;\n                4. source  e://DataBase//haha.sql\n")])])]),t("p",[e._v("2.图形化工具的方式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("此处以使用Navicat for MySQL 图形化界面为例:\n        1.选择要备份的数据库名称，\n        2.右键，选择 --\x3e转储SQL文件\n        3.选择要保存的路径\n        4.新建数据库\n        5.在新建的数据库右键选择 ---\x3e运行SQL文件\n        6.在弹出的界面选择转储sql文件保存的文件路径，点击开始\n        7.在新建的数据库中进行刷新，数据库还原成功。\n")])])]),t("h2",{attrs:{id:"事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[e._v("#")]),e._v(" 事务")]),e._v(" "),t("h3",{attrs:{id:"_1-事务的基本介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务的基本介绍"}},[e._v("#")]),e._v(" 1. 事务的基本介绍")]),e._v(" "),t("p",[e._v("1.概念：\n事务是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。")]),e._v(" "),t("p",[e._v("2.操作：")]),e._v(" "),t("p",[e._v("  1. 开启事务： start transaction;")]),e._v(" "),t("p",[e._v("  2. 回滚：rollback;")]),e._v(" "),t("p",[e._v("  3. 提交：commit;")]),e._v(" "),t("p",[e._v("3.事务提交的两种方式")]),e._v(" "),t("p",[e._v("  1. 自动提交："),t("br"),e._v("\n      MySQL 数据库中事务默认自动提交。"),t("br"),e._v("\n      一条 DML(增删改)语句会自动提交一次事务。")]),e._v(" "),t("p",[e._v("  2. 手动提交："),t("br"),e._v("\n      Oracle 数据库默认是手动提交事务"),t("br"),e._v("\n      需要先开启事务，再提交")]),e._v(" "),t("p",[e._v("  3. 修改事务的默认提交方式："),t("br"),e._v("\n      查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交 0 代表手动提交"),t("br"),e._v("\n      改默认提交方式： set @@autocommit = 0;")]),e._v(" "),t("h3",{attrs:{id:"事务的四大特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的四大特征"}},[e._v("#")]),e._v(" 事务的四大特征")]),e._v(" "),t("ol",[t("li",[e._v("原子性：事务是数据库的逻辑单位，事务中的操作要么全做，要么全不做。")]),e._v(" "),t("li",[e._v("持久性：一个事务一旦提交，它对数据库中数据的改变就是永久性的，接下来的其他操作或故障不应该对其执行结果有任何影响。")]),e._v(" "),t("li",[e._v("隔离性：一个事务的执行不能被其他事务干扰，即一个事务的内部操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。")]),e._v(" "),t("li",[e._v("一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。")])]),e._v(" "),t("h3",{attrs:{id:"事务的隔离级别-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的隔离级别-了解"}},[e._v("#")]),e._v(" 事务的隔离级别（了解）")]),e._v(" "),t("p",[e._v("概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。\n存在问题：")]),e._v(" "),t("ol",[t("li",[e._v("读“脏”数据：一个事务，读取到另一个事务中没有提交的数据")]),e._v(" "),t("li",[e._v("不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。")]),e._v(" "),t("li",[e._v("丢失修改：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。")])]),e._v(" "),t("p",[e._v("隔离级别：")]),e._v(" "),t("ol",[t("li",[e._v("read uncommitted：读未提交。\n产生的问题：脏读、不可重复读、幻读")]),e._v(" "),t("li",[e._v("read committed：读已提交 （Oracle）\n产生的问题：不可重复读、幻读")]),e._v(" "),t("li",[e._v("repeatable read：可重复读 （MySQL 默认）\n产生的问题：幻读")]),e._v(" "),t("li",[e._v("serializable：串行化\n可以解决所有的问题\n注意：隔离级别从小到大安全性越来越高，但是效率越来越低\n数据库查询隔离级别：\nselect @@tx_isolation;\n数据库设置隔离级别：\nset global transaction isolation level 级别字符串;")])]),e._v(" "),t("h2",{attrs:{id:"dcl-管理用户-授权"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dcl-管理用户-授权"}},[e._v("#")]),e._v(" DCL --\x3e 管理用户，授权")]),e._v(" "),t("h3",{attrs:{id:"mysql-中忘记-root-用户的密码解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-中忘记-root-用户的密码解决方案"}},[e._v("#")]),e._v(" mysql 中忘记 root 用户的密码解决方案")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1. 使用管理员权限打开cmd -- > net stop mysql 停止mysql服务\n2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables\n3. 打开新的cmd窗口,直接输入mysql命令，敲回车键。就可以登录成功\n4. use mysql;\n5. update user set password = password('新密码') where user = 'root';\n6. 关闭两个cmd窗口\n7. 打开任务管理器，手动结束mysqld.exe 的进程\n8. 启动mysql服务\n9. 使用新密码登录。\n")])])]),t("h3",{attrs:{id:"管理用户"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管理用户"}},[e._v("#")]),e._v(" 管理用户")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1.添加用户：\n语法：CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';\n示例：CREATE USER 'asd'@'localhost' IDENTIFIED BY 'asd';\n\n2. 删除用户：\n语法：DROP USER '用户名'@'主机名';\n示例：DROP USER 'asd'@'localhost';\n\n3. 修改用户密码：\n方式一： UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';\n方式二： SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');\n示例一：UPDATE USER SET PASSWORD = PASSWORD('abc') WHERE USER = 'lisi';\n示例二：SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123');\n\n4. 查询用户：\n-- 1. 切换到mysql数据库\nUSE myql;\n-- 2. 查询user表\nSELECT * FROM USER;\n")])])]),t("h3",{attrs:{id:"权限管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#权限管理"}},[e._v("#")]),e._v(" 权限管理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("1. 查询权限：\nSHOW GRANTS FOR '用户名'@'主机名';\n示例： SHOW GRANTS FOR 'root'@'localhost';\n\n2. 授予权限：\ngrant 权限列表 on 数据库名.表名 to '用户名'@'主机名';\n示例一：给asd用户授予所有权限。\nGRANT ALL ON *.* TO 'asd'@'localhost';\n示例二：给asd用户授予查询test数据库中student表的权限。\n GRANT SELECT ON test.student TO 'asd'@'localhost';\n\n3. 撤销权限：\nrevoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';\n示例：撤销asd用户对test数据库中student表的权限\nREVOKE UPDATE ON test.`student` FROM 'asd'@'localhost';\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);