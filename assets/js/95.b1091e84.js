(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{463:function(n,t,e){"use strict";e.r(t);var a=e(7),s=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[n._v("#")]),n._v(" 概念")]),n._v(" "),t("p",[n._v("Java DataBase Connectivity   Java 数据库连接。是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。")]),n._v(" "),t("h2",{attrs:{id:"jdbc-连接数据库的步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-连接数据库的步骤"}},[n._v("#")]),n._v(" JDBC 连接数据库的步骤")]),n._v(" "),t("ul",[t("li",[t("ol",[t("li",[n._v("导入驱动jar包")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[n._v("注册驱动")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[n._v("定义sql")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"4"}},[t("li",[n._v("获取数据库连接对象 Connection")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"5"}},[t("li",[n._v("获取执行sql语句的对象 Statement")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"6"}},[t("li",[n._v("执行sql，接受返回结果")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"7"}},[t("li",[n._v("处理结果")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"8"}},[t("li",[n._v("关闭资源")])])])]),n._v(" "),t("p",[t("strong",[n._v("注意：")]),n._v("  按照此步骤连接数据库会出现sql注入问题，解决此问题的方法见下方。")]),n._v(" "),t("h3",{attrs:{id:"示例代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[n._v("#")]),n._v(" 示例代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('@Test\npublic void test(){\n    Connection conn = null;\n    Statement stmt = null;\n    try {\n        //1.导入驱动jar包\n        //2.注册驱动\n        Class.forName("com.mysql.jdbc.Driver");\n\n        //3.获取数据库连接对象  ?characterEncoding=utf-8  确保sql语句执行后不会出现乱码\n        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/news?characterEncoding=utf-8", "root", "root");\n        //4.定义sql语句\n        String sql = "update student set name =\'笑哈哈\' where id = 5";\n        //5.获取执行sql的对象 Statement\n        stmt = conn.createStatement();\n        //6.执行sql\n        int i = stmt.executeUpdate(sql);\n        //7.处理结果\n        System.out.println(i);\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } finally {\n        //8.释放资源\n        if (stmt != null){\n            try {\n                stmt.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null){\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n')])])]),t("h2",{attrs:{id:"使用preparedstatement解决sql注入问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用preparedstatement解决sql注入问题"}},[n._v("#")]),n._v(" 使用PreparedStatement解决sql注入问题")]),n._v(" "),t("ul",[t("li",[t("ol",[t("li",[n._v("导入驱动jar包")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[n._v("注册驱动")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[n._v("获取数据库连接对象 Connection")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"4"}},[t("li",[n._v("定义sql"),t("br"),n._v(" "),t("strong",[n._v("注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;")])])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"5"}},[t("li",[n._v("获取执行sql语句的对象 PreparedStatement    Connection.prepareStatement(String sql)")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"6"}},[t("li",[n._v("给？赋值：\n"),t("ul",[t("li",[n._v("方法： setXxx(参数1,参数2)")]),n._v(" "),t("li",[n._v("参数1：？的位置编号 从1 开始")]),n._v(" "),t("li",[n._v("参数2：？的值")])])])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"7"}},[t("li",[n._v("执行sql，接受返回结果，不需要传递sql语句")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"8"}},[t("li",[n._v("处理结果")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"9"}},[t("li",[n._v("释放资源")])])])]),n._v(" "),t("h3",{attrs:{id:"示例代码-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-2"}},[n._v("#")]),n._v(" 示例代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(' @Test\npublic void test(){\n    Connection conn = null;\n    PreparedStatement pstmt1 =null;\n    PreparedStatement pstmt2 = null;\n\n    try {\n        //1.获取连接\n        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/news?characterEncoding=utf-8", "root", "root");\n        //2.定义sql\n        String sql1 = "update user set balance = balance - ? where id = ?";\n        String sql2 = "update user set balance = balance + ? where id = ?";\n        //3.获取执行sql对象\n        pstmt1 = conn.prepareStatement(sql1);\n        pstmt2 = conn.prepareStatement(sql2);\n        //4.设置参数\n        pstmt1.setDouble(1,500);\n        pstmt1.setInt(2,1);\n\n        pstmt2.setDouble(1,500);\n        pstmt2.setInt(2,2);\n\n        //5.执行sql\n        pstmt1.executeUpdate();\n        pstmt2.executeUpdate();\n        \n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        //7.释放资源\n        if ( pstmt2 != null){\n            try {\n                pstmt2.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (pstmt1 != null){\n            try {\n                pstmt1.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null){\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n')])])]),t("h2",{attrs:{id:"自定义工具类-jdbcutils"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义工具类-jdbcutils"}},[n._v("#")]),n._v(" 自定义工具类  JDBCUtils")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('public class JDBCUtils {\n\nprivate static String url;\nprivate static String user;\nprivate static String password;\nprivate static String driver;\n\n  /*\n  文件的读取，只需要读取一次即可，使用静态代码块\n   */\nstatic {\n    //读取资源文件，获取值。\n\n      try {\n          //1.创建Properties集合类\n          Properties pro = new Properties();\n\n          //获取src路径下的文件的方式  ----\x3eClassLoader 类加载器\n          ClassLoader classLoader = JDBCUtils.class.getClassLoader();\n          URL resource = classLoader.getResource("jdbc.properties");\n          String path = resource.getPath();\n          // System.out.println(path);\n\n          //2.加载文件\n            pro.load(new FileReader(path));\n          //3. 获取数据，赋值\n          url = pro.getProperty("url");\n          user = pro.getProperty("user");\n          password = pro.getProperty("password");\n          driver = pro.getProperty("driver");\n\n          //4.注册驱动\n          Class.forName(driver);\n\n      } catch (IOException e) {\n          e.printStackTrace();\n      } catch (ClassNotFoundException e) {\n          e.printStackTrace();\n      }\n  }\n  \n/*\n获取连接，返回连接对象\n */\npublic static Connection getConnection() throws SQLException {\n    return DriverManager.getConnection(url,user,password);\n}\n\n/*\n释放资源\n */\npublic static void Close(Statement stmt,Connection conn){\n    if (stmt != null){\n        try {\n            stmt.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    if (conn != null){\n        try {\n            conn.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n/*\n释放资源重载方法，加上ResultSet\n */\n    public static void Close(ResultSet rs , Statement stmt, Connection conn){\n        if (rs != null){\n            try {\n                rs.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (stmt != null){\n            try {\n                stmt.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null){\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n')])])]),t("h2",{attrs:{id:"练习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[n._v("#")]),n._v(" 练习")]),n._v(" "),t("h3",{attrs:{id:"问题描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[n._v("#")]),n._v(" 问题描述")]),n._v(" "),t("p",[n._v("用户通过键盘录入用户名和密码，判断用户是否登录成功（使用上述的自定义工具类）。")]),n._v(" "),t("h3",{attrs:{id:"解决方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方式"}},[n._v("#")]),n._v(" 解决方式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('  public static void main(String[] args)  {\n\n    //1.键盘录入,接收用户名和密码\n    Scanner sc  = new Scanner(System.in);\n    System.out.println("请输入用户名:");\n    String username = sc.nextLine();\n    System.out.println("请输入密码:");\n    String password = sc.nextLine();\n    \n    //2.调用方法\n    boolean flag = new JdbcDemo().Login0(username, password);\n\n    //3.判断结果，输出结果\n    if (flag){\n        System.out.println("登录成功");\n    }else{\n        System.out.println("用户名或密码错误，请重新再试");\n    }\n}\n\n/*\n登录方法  该方法存在bug\n          输入错误的用户名，输入用户密码为： a\' or \'a\' = \'a  会登录成功\n */\npublic boolean Login(String username, String password)  {\n    if (username == null || password == null){\n        return false;\n    }\n    //连接数据库判断是否登录成功\n\n    Connection conn = null;\n    Statement stmt = null;\n    ResultSet rs = null;\n    try {\n        //1.获取连接\n        conn = JDBCUtils.getConnection();\n        String sql = "select * from user where username = \'"+username+"\' and password = \'"+password+"\'";\n        //3.获取执行sql的对象\n        stmt = conn.createStatement();\n        //4.执行查询\n        rs = stmt.executeQuery(sql);\n        //5.判断\n        return  rs.next();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } finally {\n        JDBCUtils.Close(rs,stmt,conn);\n    }\n\n  return false;\n}\n\n/*\n登录方法，使用PreparedStatement ，修改上述bug\n */\npublic boolean Login0(String username, String password)  {\n    if (username == null || password == null){\n        return false;\n    }\n    //连接数据库判断是否登录成功\n\n    Connection conn = null;\n    PreparedStatement pstmt = null;\n    ResultSet rs = null;\n    try {\n        //1.获取连接\n        conn = JDBCUtils.getConnection();\n        String sql = "select * from user where username = ? and password = ?";\n        //3.获取执行sql的对象\n        pstmt = conn.prepareStatement(sql);\n        //给?赋值\n        pstmt.setString(1,username);\n        pstmt.setString(2,password);\n\n        //4.执行查询\n         rs = pstmt.executeQuery();\n        //5.判断\n        return  rs.next();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } finally {\n        JDBCUtils.Close(rs,pstmt,conn);\n    }\n  return false;\n}\n')])])]),t("h2",{attrs:{id:"jdbc-数据库连接池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-数据库连接池"}},[n._v("#")]),n._v(" JDBC 数据库连接池")]),n._v(" "),t("h3",{attrs:{id:"_1-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[n._v("#")]),n._v(" 1. 概念")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("是一个容器(集合)，存放数据库连接的容器。   \n当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("h3",{attrs:{id:"_2-好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-好处"}},[n._v("#")]),n._v(" 2. 好处")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1. 节约资源 。 \n2. 用户访问高效 。 \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("h3",{attrs:{id:"_3-实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现"}},[n._v("#")]),n._v(" 3. 实现")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("3.1 标准接口：DataSource   javax.sql包下的    \n        方法：  \n            获取连接：getConnection()  \n            归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么当调用Connection.close()方法时，不会再关闭连接，而是归还连接。  \n3.2 一般我们不去实现它，由数据库厂商来实现。    \n        1. C3P0：数据库连接池技术。  \n        2. Druid：数据库连接池实现技术，由阿里巴巴提供的。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("h3",{attrs:{id:"c3p0-数据库连接池技术-步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c3p0-数据库连接池技术-步骤"}},[n._v("#")]),n._v(" C3P0：数据库连接池技术 步骤")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1. 导入jar包 (两个) c3p0-0.9.5.2.jar&emsp;&emsp;  mchange-commons-java-0.2.12.jar   \n\n注意: 不要忘记导入数据库驱动jar包。 \n\n2. 定义配置文件：  \n      名称： c3p0.properties 或者 c3p0-config.xml  \n      路径：直接将文件放在src目录下即可。\n\n3. 创建核心对象 数据库连接池对象 ComboPooledDataSource \n\n4. 获取连接： getConnection \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("h4",{attrs:{id:"c3p0-config-xml配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c3p0-config-xml配置文件"}},[n._v("#")]),n._v(" c3p0-config.xml配置文件：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<c3p0-config>\n    \x3c!-- 使用默认的配置读取连接池对象 --\x3e\n    <default-config>\n  \t    \x3c!--  连接参数 --\x3e\n        <property name="driverClass">com.mysql.jdbc.Driver</property>\n        <property name="jdbcUrl">jdbc:mysql://localhost:3306/online_exam_system?characterEncoding=utf-8</property>\n        <property name="user">root</property>\n        <property name="password">123456</property>\n    \n        \x3c!-- 连接池参数 --\x3e\n        \x3c!-- 初始化连接数量 --\x3e\n        <property name="initialPoolSize">5</property>\n        \x3c!-- 最大连接数量，可以根据自己的需要调整 --\x3e\n        <property name="maxPoolSize">10</property>\n        \x3c!-- 超时时间的毫秒数 --\x3e\n        <property name="checkoutTimeout">3000</property>\n    </default-config>\n\n    <named-config name="otherc3p0"> \n        \x3c!--  连接参数 --\x3e\n        <property name="driverClass">com.mysql.jdbc.Driver</property>\n        <property name="jdbcUrl">jdbc:mysql://localhost:3306/online_exam_system</property>\n        <property name="user">root</property>\n        <property name="password">123456</property>\n    \n        \x3c!-- 连接池参数 --\x3e\n        <property name="initialPoolSize">5</property>\n        <property name="maxPoolSize">8</property>\n        <property name="checkoutTimeout">1000</property>\n    </named-config>\n</c3p0-config>\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br")])]),t("h4",{attrs:{id:"示例代码-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-3"}},[n._v("#")]),n._v(" 示例代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('//使用默认配置获取DataSource\n@Test\npublic void test1() throws SQLException {\n    //1.获取DataSource,使用默认配置\n    DataSource ds = new ComboPooledDataSource();\n\n    //2.获取连接(验证最大连接数量)\n    for (int i = 1 ;i <= 10 ; i++){\n        Connection conn = ds.getConnection();\n        System.out.println(i + ":" + conn );\n    }\n}\n\n//使用指定名称配置获取DataSource\n @Test\npublic void test2() throws SQLException {\n    //1获取DataSource，使用指定名称配置\n    DataSource ds = new ComboPooledDataSource("otherc3p0");\n\n    //2.获取连接(验证最大连接数量),因为xml文件中的设置的最大连接数量是8，此时会报异常\n    for (int i = 1 ;i <= 10 ; i++){\n        Connection conn = ds.getConnection();\n        System.out.println(i + ":" + conn );\n    }\n}\n')])])]),t("h2",{attrs:{id:"druid-数据库连接池实现技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#druid-数据库连接池实现技术"}},[n._v("#")]),n._v(" Druid：数据库连接池实现技术")]),n._v(" "),t("h3",{attrs:{id:"_1-步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-步骤"}},[n._v("#")]),n._v(" 1. 步骤")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1. 导入jar包 druid-1.0.9.jar  \n\n2. 定义配置文件：  \n       是properties形式的。  \n       可以叫任意名称，可以放在任意目录下。\n\n3. 加载配置文件。Properties。  \n\n4. 获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory \n\n5. 获取连接：getConnection \n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br")])]),t("p",[n._v("示例代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    @Test\n    public void test() throws Exception {\n        //1.导入jar包\n        //2.定义配置文件\n        //3.加载配置文件\n        Properties pro = new Properties();\n        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream("druid.properties");\n        pro.load(is);\n        //4.获取连接池对象\n        DataSource ds = DruidDataSourceFactory.createDataSource(pro);\n\n        //5.获取连接\n        Connection conn = ds.getConnection();\n        System.out.println(conn);\n    }\n')])])]),t("h3",{attrs:{id:"_2-自定义工具类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义工具类"}},[n._v("#")]),n._v(" 2. 自定义工具类")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1. 定义一个类 JDBCUtils  \n2. 提供静态代码块加载配置文件，初始化连接池对象  \n3. 提供方法  \n    1. 获取连接方法：通过数据库连接池获取连接  \n\t2. 释放资源  \n    3. 获取连接池的方法 \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("h4",{attrs:{id:"示例代码-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-4"}},[n._v("#")]),n._v(" 示例代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('public class JDBCUtils {\n    //1.定义成员变量：DataSource\n    private static DataSource ds ;\n\n    static {\n        try {\n            //1.加载配置文件\n            Properties pro = new Properties();\n            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties"));\n            //2.获取DataSource\n            ds = DruidDataSourceFactory.createDataSource(pro);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /*\n    获取连接\n    */\n    public static Connection getConnection() throws SQLException {\n        return ds.getConnection();\n    }\n\n    /*\n    释放资源\n    */\n    public static void close(Statement stmt,Connection conn) {\n        if (stmt != null) {\n            try {\n                stmt.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null) {\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /*\n    释放资源的重载方法\n    */\n    public static void close(ResultSet rs,Statement stmt,Connection conn){\n        if (rs != null){\n            try {\n                rs.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (stmt != null){\n            try {\n                stmt.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null){\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /*\n    获取连接池的方法\n    */\n    public static DataSource getDataSource(){\n        return ds;\n    }\n}\n')])])]),t("h2",{attrs:{id:"spring-jdbc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdbc"}},[n._v("#")]),n._v(" Spring JDBC")]),n._v(" "),t("p",[n._v("Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发。")]),n._v(" "),t("h3",{attrs:{id:"步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[n._v("#")]),n._v(" 步骤")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1. 导入jar包\n\n2. 创建JdbcTemplate对象。依赖于数据源DataSource  \nJdbcTemplate template = new JdbcTemplate(ds);\n\n3. 调用JdbcTemplate的方法来完成CRUD的操作  \n      update():执行DML语句。增、删、改语句  \n      queryForMap():查询结果将结果集封装为map集合，列名作为key，值作为value, 将这条记录封装为一个map集合. \n\n注意：这个方法查询的结果集长度只能是1  \n\nqueryForList():查询结果将结果集封装为list集合  \n注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中 \n\nquery():查询结果，将结果封装为JavaBean对象。  \n\nquery的参数：RowMapper  一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装  \n\nnew BeanPropertyRowMapper<类型>(类型.class)  \nqueryForObject()：查询结果，将结果封装为对象，一般用于聚合函数的查询。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("h3",{attrs:{id:"练习-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习-2"}},[n._v("#")]),n._v(" 练习")]),n._v(" "),t("h4",{attrs:{id:"问题描述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-2"}},[n._v("#")]),n._v(" 问题描述")]),n._v(" "),t("ul",[t("li",[t("ol",[t("li",[n._v("修改1号数据的 salary 为 666")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[n._v("添加一条记录")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[n._v("删除刚才添加的记录")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"4"}},[t("li",[n._v("查询id为1的记录，将其封装为Map集合")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"5"}},[t("li",[n._v("查询所有记录，将其封装为List")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"6"}},[t("li",[n._v("查询所有记录，将其封装为Emp对象的List集合")])])]),n._v(" "),t("li",[t("ol",{attrs:{start:"7"}},[t("li",[n._v("查询总记录数.")])])])]),n._v(" "),t("h4",{attrs:{id:"示例代码-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-5"}},[n._v("#")]),n._v(" 示例代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('private  JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());\n//修改1号数据的 salary为666\n@Test\npublic void test1(){\n    String sql = "update manager set salary = 666 where id = ?";\n    int count = template.update(sql, 1);\n    System.out.println(count);\n    if (count > 0){\n        System.out.println("更新成功");\n    }else{\n        System.out.println("更新失败");\n    }\n}\n\n//添加一条记录\n@Test\npublic void test2(){\n\n  String sql = "insert into manager values(null,?,?,?,?) ";\n    int count = template.update(sql, "manager7", "m7", "super", 1666);\n    if (count > 0){\n        System.out.println("更新成功");\n    }else{\n        System.out.println("更新失败");\n    }\n}\n\n//删除刚才添加的记录\n@Test\npublic void test3(){\n String sql = "delete from manager where id = ?";\n    int count = template.update(sql, 7);\n    if (count > 0){\n        System.out.println("更新成功");\n    }else{\n        System.out.println("更新失败");\n    }\n}\n\n/*\n查询id为 1 的记录，将其封装成Map集合\n注意：queryForMap()查询的结果集长度只能为1\n */\n@Test\npublic void test4(){\nString  sql = "select * from  manager where id = ?";\n    Map<String, Object> map = template.queryForMap(sql, 1);\n    System.out.println(map);\n}\n\n//查询所有记录，将其封装成List集合\n@Test\npublic void test5(){\n    String sql = "select * from manager";\n    List<Map<String, Object>> maps = template.queryForList(sql);\n    Iterator<Map<String, Object>> iterator = maps.iterator();\n    while (iterator.hasNext()){\n        System.out.println(iterator.next());\n    }\n}\n\n//查询所有记录，将其封装为Manager对象的List集合\n@Test\npublic void test6(){\n    String sql = "select * from manager";\n    List<Manager> list = template.query(sql, new RowMapper<Manager>() {\n        @Override\n        public Manager mapRow(ResultSet rs, int i) throws SQLException {\n            Manager manager = new Manager();\n            int id = rs.getInt("id");\n            String name = rs.getString("name");\n            String password = rs.getString("password");\n            String authority = rs.getString("authority");\n            double salary = rs.getDouble("salary");\n\n            manager.setId(id);\n            manager.setName(name);\n            manager.setPassword(password);\n            manager.setAuthority(authority);\n            manager.setSalary(salary);\n\n            return manager;\n        }\n    });\n    for (Manager manager : list){\n        System.out.println(manager);\n    }\n}\n\n//查询所有记录，将其封装为Manager对象的List集合的改进\n@Test\npublic void test7(){\n    String sql = "select * from manager";\n    List<Manager> list = template.query(sql, new BeanPropertyRowMapper<Manager>(Manager.class));\n    for (Manager manager : list){\n        System.out.println(manager);\n    }\n}\n\n//查询总记录数\n@Test\npublic void test8(){\n String sql = "select count(id) from manager";\n    Long total = template.queryForObject(sql, Long.class);\n    System.out.println(total);\n}')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);