(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{445:function(s,n,a){"use strict";a.r(n);var e=a(7),r=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java-中比较对象大小的两种实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-中比较对象大小的两种实现方式"}},[s._v("#")]),s._v(" Java 中比较对象大小的两种实现方式")]),s._v(" "),n("h2",{attrs:{id:"引入原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引入原因"}},[s._v("#")]),s._v(" 引入原因：")]),s._v(" "),n("p",[s._v("Java 中的对象，正常情况下，只能进行比较：== 或！= ，不能使用 < 或 > ，但是在开发时需要用到比较对象的大小")]),s._v(" "),n("h2",{attrs:{id:"_1-comparable-接口的使用-自然排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-comparable-接口的使用-自然排序"}},[s._v("#")]),s._v(" 1.Comparable 接口的使用（自然排序）")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1.像 String 、包装类等实现了 Comparable 接口，重写了 compareTo()方法，给出了比较两个对象大小的方法")])]),s._v(" "),n("li",[n("p",[s._v("2.像 String 、包装类等重写了 compareTo()方法后，默认执行了从小到大的排序")])]),s._v(" "),n("li",[n("p",[s._v("3.重写 compareTo（）的规则：")]),s._v(" "),n("p",[s._v("如果当前对象 this 大于形参对象 obj，则返回正整数，如果当前对象 this 小于形参对象 obj,则返回负整数。如果当前对象 this 等于形参对象 obj,则返回零。")])]),s._v(" "),n("li",[n("p",[s._v("4.对于自定义类来说，如果需要排序，我们可以让自定义类实现 Comparable 接口，重写 compareTo()方法， 在 compareTo()方法中指明如何排序")])])]),s._v(" "),n("h3",{attrs:{id:"string-类的自然排序实现举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-类的自然排序实现举例"}},[s._v("#")]),s._v(" String 类的自然排序实现举例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(' @Test\n    public void test1(){\n        String[] arr=new String[] {"GG","MM","AA","CC","DD","KK"};\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));  //[AA, CC, DD, GG, KK, MM]\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"自定义类的自然排序举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义类的自然排序举例"}},[s._v("#")]),s._v(" 自定义类的自然排序举例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(' @Test\n    public void test2(){\n        Goods[] arr=new Goods[4];\n        arr[0] = new Goods("lenovoMouse",34);\n        arr[1] = new Goods("dellMouse",66);\n        arr[2] = new Goods("xiaomiMouse",50);\n        arr[3] = new Goods("hahaMouse",66);\n\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n        /*\n        运行结果：\n         [Goods{name=\'lenovoMouse\', price=34.0}, Goods{name=\'xiaomiMouse\', price=50.0},\n          Goods{name=\'dellMouse\', price=66.0}, Goods{name=\'hahaMouse\', price=66.0}]\n         */\n    }\n  Goods商品类的实现代码：\n\npublic class Goods implements Comparable {\n    private String name;\n    private double price;\n\n    public Goods() {\n\n    }\n\n    public Goods(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return "Goods{" +\n                "name=\'" + name + \'\\\'\' +\n                ", price=" + price +\n                \'}\';\n    }\n\n    //指明商品比较大小的方式，按照价格从低到高排序，如果出现价格相同的，再按照产品名称从低到高排序\n    @Override\n    public int compareTo(Object o) {\n        if(o instanceof Goods ){\n            Goods goods =(Goods)o;\n            if (this.price > goods.price) {\n                return 1;\n            }else if(this.price < goods.price){\n                return  -1;\n            }else\n                //return 0;\n                return this.name.compareTo(goods.name);\n        }\n       throw new RuntimeException("传入的数据类型不一致");\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br")])]),n("h2",{attrs:{id:"_2-comparator-接口的使用-定制排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-comparator-接口的使用-定制排序"}},[s._v("#")]),s._v(" 2.Comparator 接口的使用 （定制排序）")]),s._v(" "),n("h3",{attrs:{id:"_2-1-引入原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-引入原因"}},[s._v("#")]),s._v(" 2.1 引入原因")]),s._v(" "),n("p",[s._v("当元素的类型没有实现 java.lang.Comparable 借口而又不方便修改代码，或者实现了 java.lang.Comparable 接口的排序规则不适合当前的操作可以考虑使用 Comparator 的对象来实现排序。")]),s._v(" "),n("h3",{attrs:{id:"重写-compare-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重写-compare-方法"}},[s._v("#")]),s._v(" 重写 compare 方法")]),s._v(" "),n("p",[s._v("重写 compare(Object o1,Object o2)方法，比较 o1 和 o2 的大小，如果方法返回正整数，则表示 o1 大于 o2,如果返回 0，表示二者相等，如果返回负整数，表示 o1 小于 o2.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('举例一：\n\n@Test\n   public void test1(){\n        String[] arr=new String[] {"GG","MM","AA","CC","DD","KK"};\n        Arrays.sort(arr, new Comparator() {\n\n            //按照字符串从大到小的顺序排序\n            @Override\n            public int compare(Object o1, Object o2) {\n                if(o1 instanceof String && o2 instanceof String ){\n                    String s1=(String)o1;\n                    String s2=(String)o2;\n                    return  -s1.compareTo(s2);\n                }\n                //return 0;\n                throw new RuntimeException("输入的数据类型不一致");\n            }\n        });\n        System.out.println(Arrays.toString(arr));  //[MM, KK, GG, DD, CC, AA]\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('举例二：\n\n @Test\n    public void test2(){\n        Goods[] arr=new Goods[5];\n        arr[0] = new Goods("lenovoMouse",34);\n        arr[1] = new Goods("dellMouse",66);\n        arr[2] = new Goods("xiaomiMouse",50);\n        arr[3] = new Goods("hahaMouse",66);\n        arr[4] = new Goods("hahaMouse",166);\n\n        Arrays.sort(arr, new Comparator() {\n             //指明商品比较大小的方式，按照产品名称从低到高排序，再按照价格从高到低排序\n            @Override\n            public int compare(Object o1, Object o2) {\n               if(o1 instanceof  Goods && o2 instanceof Goods){\n                   Goods g1=(Goods)o1;\n                   Goods g2=(Goods)o2;\n                   if(g1.getName().equals(g2.getName())){\n\n                       return -Double.compare(g1.getPrice(),g2.getPrice());\n                   }else {\n                       return g1.getName().compareTo(g2.getName());\n                   }\n               }\n                throw new RuntimeException("输入的数据类型不一致");\n            }\n        });\n        System.out.println(Arrays.toString(arr));\n        /*\n        运行结果：\n        [Goods{name=\'dellMouse\', price=66.0}, Goods{name=\'hahaMouse\', price=166.0},\n         Goods{name=\'hahaMouse\', price=66.0}, Goods{name=\'lenovoMouse\', price=34.0},\n         Goods{name=\'xiaomiMouse\', price=50.0}]\n         */\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br")])]),n("h3",{attrs:{id:"_2-3comparable-接口与-comparator-接口的使用的对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3comparable-接口与-comparator-接口的使用的对比"}},[s._v("#")]),s._v(" 2.3Comparable 接口与 Comparator 接口的使用的对比")]),s._v(" "),n("p",[s._v("Comparable 接口的方式一旦指定，保证 Comparable 接口实现类的对象在任何位置都可以比较大小。")]),s._v(" "),n("p",[s._v("Comparator 接口属于临时性的比较。")])])}),[],!1,null,null,null);n.default=r.exports}}]);