(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{446:function(s,n,a){"use strict";a.r(n);var e=a(7),r=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"string、stringbuffer、stringbuilder-的对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer、stringbuilder-的对比"}},[s._v("#")]),s._v(" String、StringBuffer、StringBuilder 的对比")]),s._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("p",[s._v("Java 提供了 String、StringBuffer 和 StringBuilder 类来封装字符串，并提供了一系列操作字符串对象的方法。")]),s._v(" "),n("p",[s._v("三者的共同点是都用来封装字符串、都实现了 CharSequence 接口、底层都使用 char[]存储。但是它们之间也存在不同点。")]),s._v(" "),n("h2",{attrs:{id:"三者部分源码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三者部分源码"}},[s._v("#")]),s._v(" 三者部分源码")]),s._v(" "),n("h3",{attrs:{id:"string-部分源码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-部分源码"}},[s._v("#")]),s._v(" String 部分源码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence\n{\n\n    private final char value[];\n\n    private int hash; // Default to 0\n\n    private static final long serialVersionUID = -6849794470754667710L;\n\n    private static final ObjectStreamField[] serialPersistentFields =\n     new ObjectStreamField[0];\n\n      public String()\n      {\n       this.value = "".value;\n      }\n      public String(String original)\n      {\n         this.value = original.value;\n         this.hash = original.hash;\n      }\n      public String(char value[]) {\n        this.value = Arrays.copyOf(value, value.length);\n      }\n      public boolean equals(Object anObject)\n      {\n        if (this == anObject) {\n          return true;\n        }\n        if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n         char v1[] = value;\n         char v2[] = anotherString.value;\n         int i = 0;\n         while (n-- != 0) {\n          if (v1[i] != v2[i])\n            return false;\n              i++;\n             }\n             return true;\n           }\n       }\n       return false;\n      }\n       public int hashCode() {\n         int h = hash;\n          if (h == 0 && value.length > 0) {\n          char val[] = value;\n\n       for (int i = 0; i < value.length; i++) {\n         h = 31 * h + val[i];\n        }\n          hash = h;\n         }\n         return h;\n       }\n        public int indexOf(int ch) {\n          return indexOf(ch, 0);\n        }\n    ...\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br")])]),n("h3",{attrs:{id:"stringbuffer-部分源码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stringbuffer-部分源码"}},[s._v("#")]),s._v(" StringBuffer 部分源码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public final class StringBuffer\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence\n{\n\n    private transient char[] toStringCache;\n\n    static final long serialVersionUID = 3388685877147921107L;\n\n    public StringBuffer() {\n        super(16);\n    }\n    public StringBuffer(int capacity) {\n        super(capacity);\n    }\n\n    public StringBuffer(String str) {\n        super(str.length() + 16);\n        append(str);\n    }\n\n    public StringBuffer(CharSequence seq) {\n        this(seq.length() + 16);\n        append(seq);\n    }\n  ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h3",{attrs:{id:"stringbuilder-部分源码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder-部分源码"}},[s._v("#")]),s._v(" StringBuilder 部分源码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public final class StringBuilder\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence\n{\n\n    static final long serialVersionUID = 4383685877147921099L;\n\n    public StringBuilder() {\n        super(16);\n    }\n\n    public StringBuilder(int capacity) {\n        super(capacity);\n    }\n\n    public StringBuilder(String str) {\n        super(str.length() + 16);\n        append(str);\n    }\n\n    public StringBuilder(CharSequence seq) {\n        this(seq.length() + 16);\n        append(seq);\n    }\n   ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"_1-是否可变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-是否可变"}},[s._v("#")]),s._v(" 1.是否可变？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("String 是被 final 修饰的，是不可变的字符序列，是字符串常量，即使调用 String 的concat 方法，也只是把字符串拼接起来，把拼接后的 String 的值赋给新创建的对象。\n\nStringBuffer 和 StringBuilder 是可变的字符序列，是字符串变量，类的对象能够被多次的修改，并且不产生新的未使用对象。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"_2-线程是否安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程是否安全"}},[s._v("#")]),s._v(" 2.线程是否安全？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("String中的对象是不可变的，是被final修饰的，是字符串常量，是线程安全的。\n\nStringBuffer对象在缓冲区被多个线程使用时，它的中的方法大都使用了synchronized 关键字进行修饰，加了同步锁，所以是线程安全的。\n\nStringBuilder是jdk5.0新增的，在使用时没有被synchronized 关键字修饰，不能保证线程安全，可能会出现一些操作错误。\n\nAbstractStringBuilder是StringBuilder和StringBuffer的公共父类，定义了一些字符串的基本操作，它们的用法基本相同。\n\n多线程情况下建议使用StringBuffer,单线程建议使用速度较快的StringBuilder。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"_3-执行效率"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行效率"}},[s._v("#")]),s._v(" 3.执行效率")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("StringBuilder最高，StringBuffer次之，String最低。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_4-初始化方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-初始化方式"}},[s._v("#")]),s._v(" 4.初始化方式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('创建String对象时，可以利用构造方法String str = new String("haha")的方式来对其进行初始化，也可以直接用赋值的方式String s = "haha"来进行初始化。而StringBuffer只能使用构造方法StringBuffer sb = new StringBuffer("hahaha")的方式来进行初始化。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_5-是否实现了-hashcode-和-equals-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-是否实现了-hashcode-和-equals-方法"}},[s._v("#")]),s._v(" 5.是否实现了 hashCode 和 equals 方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String实现了equals和hashCode方法，new String("haha").equals(new String("haha"))的结果为true；\n\n而StringBuffer没有实现equals和hashCode方法，new StringBuffer("heihei").equals(new StringBuffer("heihei"))的结果为false。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"_6-使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用场景"}},[s._v("#")]),s._v(" 6.使用场景")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。\n\n然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。 append方法与直接使用+串联相比，减少常量池的浪费。\n\n一般而言，如果要操作少量的数据时，优先使用String类；如果是在单线程下操作大量数据，优先使用StringBuilder类；如果是在多线程下操作大量的数据，优先使用StringBuilder类。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);