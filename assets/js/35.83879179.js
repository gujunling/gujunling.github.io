(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{403:function(n,t,s){"use strict";s.r(t);var a=s(7),e=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-原型与原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-原型与原型链"}},[n._v("#")]),n._v(" JavaScript 原型与原型链")]),n._v(" "),t("h2",{attrs:{id:"javascript-原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-原型"}},[n._v("#")]),n._v(" JavaScript 原型")]),n._v(" "),t("h3",{attrs:{id:"分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[n._v("#")]),n._v(" 分类")]),n._v(" "),t("p",[n._v("函数的原型分为显式原型和隐式原型")]),n._v(" "),t("ul",[t("li",[n._v("显式原型(prototype 属性)")]),n._v(" "),t("li",[n._v("隐式原型("),t("strong",[n._v("proto")]),n._v(")")])]),n._v(" "),t("h3",{attrs:{id:"_1-函数的-prototype-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数的-prototype-属性"}},[n._v("#")]),n._v(" 1. 函数的 prototype 属性")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("每个函数都有一个 prototype 属性, 它默认指向一个 Object 空对象(即称为: 原型对象)")])]),n._v(" "),t("li",[t("p",[n._v("原型对象中有一个属性 constructor, 它指向函数对象")])]),n._v(" "),t("li",[t("p",[n._v("注意：Object 空对象(原型对象)只是内容为空, 并不是真正意义上的空对象 Object.create(null), 还是能够通过原型链看到 Object.prototype 上的各种属性、方法,例如: toString()")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<script type="text/javascript">\n    // 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)\n    console.log(Date.prototype, typeof Date.prototype);\n    function Fun() {}\n    console.log(Fun.prototype); // 默认指向一个Object空对象(当我们没有为其添加属性时没有我们的属性)\n\n    // 原型对象中有一个属性constructor, 它指向函数对象\n    console.log(Date.prototype.constructor === Date);\n    console.log(Fun.prototype.constructor === Fun);\n<\/script>\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("h3",{attrs:{id:"_2-给原型对象添加属性-一般都是方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-给原型对象添加属性-一般都是方法"}},[n._v("#")]),n._v(" 2. 给原型对象添加属性(一般都是方法)")]),n._v(" "),t("ul",[t("li",[n._v("作用: 函数的所有实例对象自动拥有原型中的属性(方法)")])]),n._v(" "),t("h3",{attrs:{id:"_3-显式原型-隐式原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-显式原型-隐式原型"}},[n._v("#")]),n._v(" 3.显式原型&&隐式原型")]),n._v(" "),t("ol",[t("li",[n._v("每个函数 function 都有一个 prototype，即显式原型(属性)")]),n._v(" "),t("li",[n._v("每个实例对象都有一个"),t("code",[n._v("__proto__")]),n._v("，可称为隐式原型(属性)")]),n._v(" "),t("li",[n._v("实例对象的隐式原型的值为其对应构造函数的显式原型的值，实例对象的隐式原型和其对应构造函数的显式原型指向同一个对象")])]),n._v(" "),t("h3",{attrs:{id:"_4-显式原型和隐式原型的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-显式原型和隐式原型的区别"}},[n._v("#")]),n._v(" 4. 显式原型和隐式原型的区别")]),n._v(" "),t("ul",[t("li",[n._v("隐式原型"),t("code",[n._v("__proto__")]),n._v("是每个对象(函数、数组也是对象)都有的一个属性，而显式原型 prototype 是函数才会有（函数也有"),t("code",[n._v("__proto__")]),n._v("）的属性。")]),n._v(" "),t("li",[n._v("函数的 prototype 属性: 在定义函数时自动添加的, 默认值是一个空 Object 对象(只是内容为空, 并不是真正意义上的空对象)")]),n._v(" "),t("li",[n._v("实例对象的"),t("code",[n._v("__proto__")]),n._v("属性: 创建对象时自动添加的, 默认值为构造函数的 prototype 属性值")]),n._v(" "),t("li",[n._v("在 ES6 之前，开发者能直接操作显式原型, 但不能直接操作隐式原型,ES6 之后，也可以直接操作隐式原型")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('  //定义构造函数\n  function Fn() {\n    // 内部语句: this.prototype = {}\n  }\n  // 1. 每个函数function都有一个prototype，即显式原型属性, 默认指向一个空的Object对象\n  console.log(Fn.prototype); //{constructor: ƒ}\n  console.log(Fn.__proto__); //ƒ () { [native code] }\n\n  // 2. 每个实例对象都有一个__proto__，可称为隐式原型\n  //创建实例对象\n  let fn = new Fn(); // 在内部写了一条语句: this.__proto__ = Fn.prototype，此时的this为fn\n  console.log(fn.__proto__); //{constructor: ƒ}\n  // 3. 实例对象的隐式原型的值为其对应构造函数的显式原型的值\n  console.log(Fn.prototype === fn.__proto__); // true\n  //给原型添加方法\n  Fn.prototype.test = function () {\n  console.log("原型上的test()执行了");\n  };\n  //通过实例调用原型的方法\n  fn.test();\n\n  // 为隐式原型添加方法\n  fn.__proto__.haha = function () {\n  console.log("哈哈哈哈哈哈");\n  };\n  // 查看隐式原型上是否包含此方法\n  console.log(fn.__proto__);\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br")])]),t("h3",{attrs:{id:"_5-显式原型与隐式原型内存分析图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-显式原型与隐式原型内存分析图"}},[n._v("#")]),n._v(" 5.显式原型与隐式原型内存分析图")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gujunling.github.io/images/2c58f70e357d4e5fb8eafdc4094efc22.png",alt:"显式原型与隐式原型内存分析图"}})]),n._v(" "),t("h2",{attrs:{id:"javascript-原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-原型链"}},[n._v("#")]),n._v(" JavaScript 原型链")]),n._v(" "),t("ul",[t("li",[n._v("访问一个对象的属性时:\n"),t("ul",[t("li",[n._v("先在自身属性中查找，找到返回")]),n._v(" "),t("li",[n._v("如果没有, 再沿着"),t("code",[n._v("__proto__")]),n._v("这条链向上查找, 找到了就返回属性")]),n._v(" "),t("li",[n._v("如果最终没找到, 返回 undefined")])])]),n._v(" "),t("li",[n._v("别名: 隐式原型链")]),n._v(" "),t("li",[n._v("作用: 查找对象的属性(方法)")])]),n._v(" "),t("h3",{attrs:{id:"注意点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[n._v("#")]),n._v(" 注意点")]),n._v(" "),t("ul",[t("li",[n._v("函数的显式原型指向的对象默认是空 Object 实例对象(但 Object 不满足)")]),n._v(" "),t("li",[n._v("所有函数都是 Function 的实例(包含 Function，相当于 Function = new Function(),Function 是它自身的实例)，不论这个函数是如何定义的")]),n._v(" "),t("li",[n._v("所有函数的"),t("code",[n._v("__proto__")]),n._v("都是一样的，因为都是 Function 的实例,即所有函数的"),t("code",[n._v("__proto__")]),n._v("都指向"),t("code",[n._v("Function.prototype")])]),n._v(" "),t("li",[n._v("Object 的原型对象(Object.prototype)是原型链尽头，object 的显式原型的隐式原型是 null")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  function Fn() {}\n  console.log(Fn.prototype);\n\n  /*\n  1. 函数的显式原型指向的对象默认是空Object实例对象(但Object不满足)\n  */\n  console.log(Fn.prototype instanceof Object); // true\n  console.log(Object.prototype instanceof Object); // false\n  console.log(Function.prototype instanceof Object); // true\n  /*\n  2. 所有函数都是Function的实例(包含Function，相当于 Function = new Function(),Function 是它自身的实例)，不论这个函数是如何定义的\n      所有函数的__proto__都是一样的，因为都是Function的实例\n  */\n  console.log(Function.__proto__ === Function.prototype); //true\n  /*\n  3. Object的原型对象(Object.prototype)是原型链尽头，object的显式原型的隐式原型是null\n  */\n  console.log(Object.prototype.__proto__); // null\n  console.log(Function.prototype.__proto__); //实际上是 Object.prototype\n  console.log(Function.prototype.__proto__.__proto__); // null\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("h3",{attrs:{id:"原型继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型继承"}},[n._v("#")]),n._v(" 原型继承")]),n._v(" "),t("ul",[t("li",[n._v("原型继承利用的就是原型链")]),n._v(" "),t("li",[n._v("构造函数的实例对象自动拥有构造函数原型对象的属性(方法)")])]),n._v(" "),t("h3",{attrs:{id:"原型链属性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型链属性问题"}},[n._v("#")]),n._v(" 原型链属性问题")]),n._v(" "),t("ol",[t("li",[n._v("读取对象的属性值时: 会自动到原型链中查找")]),n._v(" "),t("li",[n._v("设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值")]),n._v(" "),t("li",[n._v("方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('  function Fn() {}\n  Fn.prototype.a = "xxx";\n  let fn1 = new Fn();\n  console.log(fn1.a, fn1);\n\n  let fn2 = new Fn();\n  fn2.a = "yyy";\n  console.log(fn1.a, fn2.a, fn2);\n\n  function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  }\n  Person.prototype.setName = function (name) {\n  this.name = name;\n  };\n  let p1 = new Person("Test11111", 12);\n  p1.setName("Test222222");\n  console.log(p1);\n\n  let p2 = new Person("hahhaha1111", 12);\n  p2.setName("hahahahhahahahah2222222s");\n  console.log(p2);\n  // 实例对象的隐式原型等于其构造函数的显式原型\n  console.log(p1.__proto__ === p2.__proto__); // true\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br")])]),t("h3",{attrs:{id:"原型链分析图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型链分析图"}},[n._v("#")]),n._v(" 原型链分析图")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gujunling.github.io/images/78bd76b488914177aea998b3339ab6fd.jpg",alt:"原型链分析图"}})]),n._v(" "),t("p",[n._v("分析：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// ===============第一部分: 自定义的构造函数及其实例============\nfunction Foo () {}  // 1. 构造函数Foo\nvar f1 = new Foo()  // 2. 实例对象f1\n// 3. 实例对象的隐式原型 指向 其构造函数的显示原型\nconsole.log(f1.__proto__ === Foo.prototype) // true\n// 4. 构造函数的显式原型是一个空的object对象\n// 5. 这个空的object对象是Object构造函数的实例\nconsole.log(Foo.prototype.__proto__ === Object.prototype) // true\n// 6. 自定义构造函数是 Function构造函数的实例\n//    换句话说: Foo这个构造函数,是new Function()出来的\nconsole.log(Foo.__proto__ === Function.prototype) // true\n// ===============第一部分: 自定义的构造函数及其实例============\n\n// =============第二部分: Object构造函数及原型链的尽头============\nconsole.log(Object) // 1.  ƒ Object() { [native code] }\n// 2. 实例对象o1、o2\nvar o1 = new Object()\nvar o2 = {}\n// 3. Object构造函数也是Function构造函数的实例\n//    换句话说: Object这个构造函数,也是new Function()出来的\nconsole.log(Object.__proto__ === Function.prototype) // ture\n// 4. Object构造函数的显式原型(Object.prototype)就是原型链的尽头\nconsole.log(Object.prototype.__proto__) // 5. null\n// =============第二部分: Object构造函数及原型链的尽头============\n\n\n// =================第三部分: 特殊Function构造函数================\nconsole.log(Function) // 1.  ƒ Function() { [native code] }\n// 2. Function构造函数的原型对象跟其他普通的构造函数一样   隐式原型指向空object对象\nconsole.log(Function.prototype.__proto__ === Object.prototype) // true\n// 3. 重点特殊的地方: Function构造函数是自己的实例\n//    换句话说: Function构造函数,是new Function()自己出来的, 即我生出我自己\nconsole.log(Function.__proto__ === Function.prototype) // true\n// 4. Function.prototype是一个函数,而不是像其他函数一样是一个空的Object对象\nconsole.log(typeof Function.prototype) // function\n// =================第三部分: 特殊Function构造函数================\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[n._v("提示")]),n._v(" "),t("p",[n._v("github 地址："),t("a",{attrs:{href:"https://github.com/gujunling/JS-study",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/gujunling/JS-study"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);